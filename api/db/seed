// api/db/seed.js
import { sql } from '@vercel/postgres';

export default async function handler(request) {
  if (request.method !== 'POST') {
    return new Response('Method not allowed', { status: 405 });
  }

  try {
    // Create test user
    await sql`
      INSERT INTO users (id, name, photo_url)
      VALUES (12345, 'Test User', 'https://example.com/photo.jpg')
    `;

    // Create translator
    const { rows: [translator] } = await sql`
      INSERT INTO translators (name, description, user_id)
      VALUES (
        'Саня',
        'Повседневность и университеты. А скоро будут и триллеры.',
        12345
      )
      RETURNING id
    `;

    // Create novel
    const { rows: [novel] } = await sql`
      INSERT INTO novels (title, description, status, translator_id)
      VALUES (
        'Университет: Начало',
        'История о студенте, который внезапно обнаруживает, что его университет скрывает древние тайны.',
        'в процессе',
        ${translator.id}
      )
      RETURNING id
    `;

    // Insert tags
    await sql`
      INSERT INTO tags (name) VALUES ('повседневность'), ('триллер')
    `;

    // Get tags
    const { rows: tags } = await sql`
      SELECT id FROM tags
    `;

    // Link tags to novel
    await sql`
      INSERT INTO novel_tags (novel_id, tag_id)
      VALUES 
        (${novel.id}, ${tags[0].id}),
        (${novel.id}, ${tags[1].id})
    `;

    // Insert first chapter
    const { rows: [chapter1] } = await sql`
      INSERT INTO chapters (novel_id, number, title, content)
      VALUES (
        ${novel.id},
        1,
        'Странное поступление',
        'Когда я впервые переступил порог университета, я и представить не мог, что моя жизнь изменится навсегда.'
      )
      RETURNING id
    `;

    // Insert second chapter
    await sql`
      INSERT INTO chapters (novel_id, number, title, content)
      VALUES (
        ${novel.id},
        2,
        'Первый день',
        'Аудитория 42-б выглядела совершенно обычно, если не считать странных символов на стенах.'
      )
    `;

    // Add test comment
    await sql`
      INSERT INTO chapter_comments (chapter_id, user_id, content)
      VALUES (${chapter1.id}, 12345, 'Очень интересное начало! Жду продолжения')
    `;

    return new Response(JSON.stringify({ 
      success: true, 
      message: 'Test data inserted successfully' 
    }), {
      headers: { 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('Error inserting test data:', error);
    return new Response(JSON.stringify({ 
      success: false, 
      error: error.message 
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}
